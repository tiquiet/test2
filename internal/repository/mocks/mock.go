// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockJSONStorage is a mock of JSONStorage interface.
type MockJSONStorage struct {
	ctrl     *gomock.Controller
	recorder *MockJSONStorageMockRecorder
}

// MockJSONStorageMockRecorder is the mock recorder for MockJSONStorage.
type MockJSONStorageMockRecorder struct {
	mock *MockJSONStorage
}

// NewMockJSONStorage creates a new mock instance.
func NewMockJSONStorage(ctrl *gomock.Controller) *MockJSONStorage {
	mock := &MockJSONStorage{ctrl: ctrl}
	mock.recorder = &MockJSONStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONStorage) EXPECT() *MockJSONStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockJSONStorage) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockJSONStorageMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockJSONStorage)(nil).Get), ctx, key)
}

// LoadFromFile mocks base method.
func (m *MockJSONStorage) LoadFromFile() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadFromFile")
}

// LoadFromFile indicates an expected call of LoadFromFile.
func (mr *MockJSONStorageMockRecorder) LoadFromFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFromFile", reflect.TypeOf((*MockJSONStorage)(nil).LoadFromFile))
}

// Put mocks base method.
func (m *MockJSONStorage) Put(ctx context.Context, key, data string, expTime int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, key, data, expTime)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockJSONStorageMockRecorder) Put(ctx, key, data, expTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockJSONStorage)(nil).Put), ctx, key, data, expTime)
}

// SaveToFile mocks base method.
func (m *MockJSONStorage) SaveToFile() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveToFile")
}

// SaveToFile indicates an expected call of SaveToFile.
func (mr *MockJSONStorageMockRecorder) SaveToFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToFile", reflect.TypeOf((*MockJSONStorage)(nil).SaveToFile))
}
